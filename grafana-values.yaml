podAnnotations:
  linkerd.io/inject: enabled

grafana.ini:
  server:
    root_url: '%(protocol)s://%(domain)s:%(http_port)s/grafana'
  auth:
    disable_login_form: true
  auth.anonymous:
    enabled: true
    org_role: Editor
  auth.basic:
    enabled: false
  analytics:
    check_for_updates: false
  panels:
    disable_sanitize_html: true
  log:
    mode: console
  log.console:
    format: text
    level: info

## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  enabled: true
  type: LoadBalancer
  loadBalancerIP: ""
  loadBalancerClass: ""
  #loadBalancerSourceRanges: []
  port: 80
  targetPort: 3000
    # targetPort: 4181 To be used with a proxy extraContainer
  ## Service annotations. Can be templated.
  annotations: {}
  labels: {}
  #portName: service

#ingress:
  #enabled: true
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  #ingressClassName: "traefik"
  # Values can be templated
  #annotations:
    #kubernetes.io/ingress.class: "traefik"
    #ingress.kubernetes.io/ssl-redirect: "false"
    # kubernetes.io/tls-acme: "true"
  #labels: {}
  #path: /
  #hosts: {}
  #  - localhost

datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: prometheus
      label: demo-cluster-orders-hazl
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      editable: true

dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards/default

dashboards:
  default:
    hazl-orders-dashboard:
      json: |
        ${indent(8, file("${path.module}/dashboards/hazl-orders-dashboard.json"))}
    # all these charts are hosted at https://grafana.com/grafana/dashboards/{id}
    top-line:
      gnetId: 15474
      revision: 4
      datasource: prometheus
    health:
      gnetId: 15486
      revision: 3
      datasource: prometheus
    kubernetes:
      gnetId: 15479
      revision: 2
      datasource: prometheus
    namespace:
      gnetId: 15478
      revision: 3
      datasource: prometheus
    deployment:
      gnetId: 15475
      revision: 6
      datasource: prometheus
    pod:
      gnetId: 15477
      revision: 3
      datasource: prometheus
    service:
      gnetId: 15480
      revision: 3
      datasource: prometheus
    route:
      gnetId: 15481
      revision: 3
      datasource: prometheus
    authority:
      gnetId: 15482
      revision: 3
      datasource: prometheus
    cronjob:
      gnetId: 15483
      revision: 3
      datasource: prometheus
    job:
      gnetId: 15487
      revision: 3
      datasource: prometheus
    daemonset:
      gnetId: 15484
      revision: 3
      datasource: prometheus
    replicaset:
      gnetId: 15491
      revision: 3
      datasource: prometheus
    statefulset:
      gnetId: 15493
      revision: 3
      datasource: prometheus
    replicationcontroller:
      gnetId: 15492
      revision: 4
      datasource: prometheus
    prometheus:
      gnetId: 15489
      revision: 2
      datasource: prometheus
    prometheus-benchmark:
      gnetId: 15490
      revision: 2
      datasource: prometheus
    multicluster:
      gnetId: 15488
      revision: 3
      datasource: prometheus
